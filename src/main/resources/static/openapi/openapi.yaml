openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger Petstore
  description: APIs for fetching pet related information

servers:
  - url: '{hostUrl}'
    variables:
      hostUrl:
        enum:
          - 'http://localhost:8881'
          - 'https://dev-env:8881'
        default: 'http://localhost:8881'

tags:
  - name: Prototype
    description: Please use tags name starting with capitals
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - Prototype
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/dob'
      responses:
        "200":
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - Prototype
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePetRequest'
      responses:
        "200":
          description: Created Pet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - Prototype
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "500":
          $ref: "#/components/responses/UnexpectedError"
components:
  parameters:
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100)
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 10
    email:
      name: owner-email
      in: query
      description: owner email id
      required: false
      schema:
        $ref: "#/components/schemas/Email"
    dob:
      name: date-of-birth
      in: query
      description: pet date of birth (yyyy-MM-dd)
      required: false
      schema:
        $ref: "#/components/schemas/DateOfBirth"
  schemas:
    Email:
      type: string
      format: email
    DateOfBirth:
      type: string
      format: date
      example: 2019-08-16
    CreatePetRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          pattern: ^(?!\s*$).+ #string that are not empty
          example: pluto
        tag:
          type: string
        dateOfBirth:
          $ref: "#/components/schemas/DateOfBirth"
        ownerEmail:
          $ref: "#/components/schemas/Email"
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
        dateOfBirth:
          $ref: "#/components/schemas/DateOfBirth"
        ownerEmail:
          $ref: "#/components/schemas/Email"
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Request syntax is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Not authorized to view this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Unexpected Server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
